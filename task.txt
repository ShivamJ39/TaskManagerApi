
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using TaskManagerApi.Data;        // <-- Make sure this matches your actual namespace
using TaskManagerApi.Models; 
[ApiController]
[Route("api/[controller]")]
public class TasksController : ControllerBase
{
    private readonly TaskDbContext _context;
    public TasksController(TaskDbContext context) => _context = context;

    [HttpGet]
    public async Task<IEnumerable<TaskModel>> GetTasks() =>
        await _context.Tasks.Include(t => t.Subtasks!).ToListAsync();

    [HttpPost]
    public async Task<IActionResult> Add(TaskModel task)
      {
        _context.Tasks.Add(task);
        await _context.SaveChangesAsync();
        return Ok(task);
    }

    [HttpPut("{id}")]
    public async Task<IActionResult> Update(int id, TaskModel task)
    {
        var existing = await _context.Tasks.Include(t => t.Subtasks).FirstOrDefaultAsync(t => t.Id == id);
        if (existing == null) return NotFound();

        existing.Title = task.Title;
        existing.Status = task.Status;
         
        await _context.SaveChangesAsync();
        return NoContent();
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> Delete(int id)
    {
        var task = await _context.Tasks.FindAsync(id);
        if (task == null) return NotFound();
        _context.Tasks.Remove(task);
        await _context.SaveChangesAsync();
        return NoContent();
    }
}


updateTask(task: Task): Observable<void> {
    return this.http.put<void>(`${this.apiUrl}/${task.id}`, task);
  }